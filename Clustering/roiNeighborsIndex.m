function neighbors = roiNeighborsIndex(imMask, winSize)
% generates neighbor cell array as an input for robust fuzzy c-means
% function rfcm
%   SYNTAX:
%   neighbors = roiNeighborsIndex(imMask, winSize) generates neighbors 
%   (cell array containing the neighboring pixel indices) with input roi
%   and window size. This function excludes pixels that are not in the
%   region of interests.
%
%   INPUT:
%   "imMask": 2d binary image representing region of interests.
%   "winSize": 2 element vector with winSize(1) the row size and winSize(2)
%   the column size.
%
%   OUTPUT:
%   "neighbors": cell array containing the neighboring pixel indices. Each
%   cell in neighbors correspond to each row generated by command
%   "Jvec = roiDataSub2Ind(J, imMask);", where J is a m * n * k 3d data
%   matrix with each pixel as a data point (k dimensional), Jvec is a (m *
%   n) * k 2d data matrix with each row as a data point. Each cell in
%   neighbors correspond to each row in Jvec.
%
% See also: roiDataSub2Ind, rfcm, steprfcm

% by Weiguang (Gavin) Ding, November 2013

imSize = size(imMask);
colOff = round((winSize(2) - 1) / 2);
rowOff = round((winSize(1) - 1) / 2);
% a table/vector that for looking up "index from roi" from "index from image"
indIm2indRoi = zeros(numel(imMask), 1);
% roiVec = reshape(imMask, numel(imMask), 1);

neighbors = cell(nnz(imMask), 1);

index = 1;
for colSub = 1 : imSize(2)
    for rowSub = 1 : imSize(1)
        if imMask(rowSub, colSub)
            
            % get the neighbors in the form of "index from image"
            neighbors{index} = ...
                getNeighborsGivenSubsOffsetsSizes(rowSub, colSub, rowOff, colOff, imSize, winSize);
            
            % get the indIm2indRoi
            indIm2indRoi(sub2ind(imSize, rowSub, colSub)) = index;
            
            index = index + 1;
        end
    end
end

% transfer the elements in neighbors from "index from image" to "index from roi"
% and remove the neighbors that are not in roi
for i = 1 : length(neighbors)
    neighbors{i} = indIm2indRoi(neighbors{i})';
    neighbors{i}(neighbors{i} == 0) = []; % In this step the neighbors that are not in roi are removed
end

end

function n = getNeighborsGivenSubsOffsetsSizes(rowSub, colSub, rowOff, colOff, imSize, winSize)
% generate neighbor specific indices
[localCol, localRow] = meshgrid(colSub - colOff : colSub + colOff, rowSub - rowOff : rowSub + rowOff);
localCol(localCol < 1) = 1;
localCol(localCol > imSize(2)) = imSize(2);
localRow(localRow < 1) = 1;
localRow(localRow > imSize(1)) = imSize(1);
n = reshape(sub2ind(imSize, localRow, localCol), 1, prod(winSize));
n(n == n((prod(winSize) + 1) / 2)) = []; % remove all the index equal to itself
n = unique(n);
end